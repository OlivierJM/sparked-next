name: Deployment

# on:
#   release:
#     types: [published]

on:
  push:
    branches:
      - release
env:
  REMOTE: ${{secrets.USERNAME}}@${{secrets.HOST}}

jobs:
  deploy:
    if: "!contains(github.event.commits[0].message, '[skip-ci]')"
    runs-on: ubuntu-latest
    container:
      image: debian:latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install Yarn
        run: npm install -g yarn

      - name: Yarn Cache Directory
        id: yarn-cache-dir-path
        run: echo '::set-output name=dir::$(yarn cache dir)'

      - name: Utilize Yarn Cache Directory
        uses: actions/cache@v1
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Utilize Next Cache Directory
        uses: actions/cache@v4
        with:
          # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
          path: |
            ~/.yarn
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn-lock.json') }}-

      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn install

      - name: Install rsync
        run: apt-get update && apt-get install -y rsync && apt-get install -y openssh-client

      - name: Create Local Build
        if: steps.tests.exit_code == 0
        id: build
        run: yarn build
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
          EMAIL_SERVER: ${{ secrets.EMAIL_SERVER }}
          MONGODB_DB: ${{ secrets.MONGODB_DB }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
          REALM_APP_ID: ${{ secrets.REALM_APP_ID }}

      - name: Prepare SSH Key
        run: |
          echo '${{secrets.DEPLOYKEY}}' > deploy_key
          chmod 400 ./deploy_key

      - name: Compress Files
        run: |
          yarn_cache_dir=$(yarn cache dir)
          mkdir -p ../temp
          tar -czf ../temp/archive.tar.gz --exclude='./node_modules' ./
          ls ../temp

      - name: Transfer build to remote server
        run: |
          scp -i ./deploy_key -o StrictHostKeyChecking=no ../temp/archive.tar.gz ${{env.REMOTE}}:${{secrets.DESTINATION}}

      - name: Clean Up
        run: |
          rm ../temp/archive.tar.gz
      - name: Transfer script to remote server
        run: |
          scp -i ./deploy_key -o StrictHostKeyChecking=no ../deployment/deploy.sh ${{env.REMOTE}}:${{secrets.DESTINATION}}

      - name: Execute script on remote server
        run: |
          ssh -i ./deploy_key -o 'StrictHostKeyChecking=no' -v ${{env.REMOTE}} '
            chmod +x deploy.sh;
            ./deploy.sh;
          '
